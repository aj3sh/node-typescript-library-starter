{"version":3,"file":"index.js","sources":["../src/lib/config.ts","../src/lib/format.ts","../src/lib/NepaliDate.ts"],"sourcesContent":["export const EPOCH = new Date(1943, 3, 14).getTime();\nexport const START_YEAR = 2000;\n// const MAX_DATE = new Date(2032, 4, 14);\n\nexport const NEPALI_DATE_MAP = [\n  [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n  [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n  [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],\n  [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n  [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n  [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n  [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n  [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n  [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n  [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n  [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],\n  [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n  [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n  [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n  [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n  [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n  [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n  [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365],\n  [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365],\n  [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365],\n  [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365],\n  [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365],\n  [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366],\n  [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n  [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366],\n  [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365],\n  [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365],\n  [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366],\n  [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n  [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n  [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n  [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366],\n  [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365],\n  [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366],\n  [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365],\n];\n\n// Include the progressive sum at the end of the array\nNEPALI_DATE_MAP.forEach((l, idx, arr) => {\n  l.push(l[13] + (idx === 0 ? 0 : arr[idx - 1][14]));\n});\n","const MONTHS_EN = [\n  \"Baisakh\",\n  \"Jestha\",\n  \"Asar\",\n  \"Shrawan\",\n  \"Bhadra\",\n  \"Aswin\",\n  \"Kartik\",\n  \"Mangsir\",\n  \"Poush\",\n  \"Magh\",\n  \"Falgun\",\n  \"Chaitra\",\n];\nconst MONTHS_SHORT_EN = [\n  \"Bai\",\n  \"Jes\",\n  \"Asa\",\n  \"Shr\",\n  \"Bhd\",\n  \"Asw\",\n  \"Kar\",\n  \"Man\",\n  \"Pou\",\n  \"Mag\",\n  \"Fal\",\n  \"Cha\",\n];\nconst MONTHS_NP = [\n  \"बैशाख\",\n  \"जेठ\",\n  \"असार\",\n  \"श्रावण\",\n  \"भाद्र\",\n  \"आश्विन\",\n  \"कार्तिक\",\n  \"मंसिर\",\n  \"पौष\",\n  \"माघ\",\n  \"फाल्गुण\",\n  \"चैत्र\",\n];\nconst MONTHS_SHORT_NP = [\n  \"बै\",\n  \"जे\",\n  \"अ\",\n  \"श्रा\",\n  \"भा\",\n  \"आ\",\n  \"का\",\n  \"मं\",\n  \"पौ\",\n  \"मा\",\n  \"फा\",\n  \"चै\",\n];\nconst NUM_NP = [\"०\", \"१\", \"२\", \"३\", \"४\", \"५\", \"६\", \"७\", \"८\", \"९\"];\nconst WEEKDAYS_SHORT_EN = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst WEEKDAYS_LONG_EN = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\nconst WEEKDAYS_SHORT_NP = [\"आइत\", \"सोम\", \"मंगल\", \"बुध\", \"बिहि\", \"शुक्र\", \"शनि\"];\nconst WEEKDAYS_LONG_NP = [\n  \"आइतबार\",\n  \"सोमबार\",\n  \"मंगलबार\",\n  \"बुधबार\",\n  \"बिहिबार\",\n  \"शुक्रबार\",\n  \"शनिबार\",\n];\n\nfunction pad(n: number) {\n  if (n < 10) {\n    return `0${n}`;\n  }\n  return `${n}`;\n}\n\nfunction npDigit(str: string) {\n  let res = \"\";\n  for (let i = 0; i < str.length; i += 1) {\n    res += NUM_NP[str.charCodeAt(i) - 48];\n  }\n  return res;\n}\n\nfunction yearEn(size: number) {\n  return (date: { year: any }) => {\n    if (size <= 2) {\n      return String(date.year).substring(2);\n    }\n    if (size === 3) {\n      return String(date.year).substring(1);\n    }\n    return date.year;\n  };\n}\n\nfunction yearNp(size: number) {\n  return (date: { year: any }) => {\n    if (size <= 2) {\n      return npDigit(String(date.year).substring(2));\n    }\n    if (size === 3) {\n      return npDigit(String(date.year).substring(1));\n    }\n    return npDigit(String(date.year));\n  };\n}\n\nfunction monthEn(size: number) {\n  return (date: { month: number }) => {\n    if (size === 1) {\n      return String(date.month + 1);\n    }\n    if (size === 2) {\n      return pad(date.month + 1);\n    }\n    if (size === 3) {\n      return MONTHS_SHORT_EN[date.month];\n    }\n    return MONTHS_EN[date.month];\n  };\n}\n\nfunction monthNp(size: number) {\n  return (date: { month: number }) => {\n    if (size === 1) {\n      return npDigit(String(date.month + 1));\n    }\n    if (size === 2) {\n      return npDigit(pad(date.month + 1));\n    }\n    if (size === 3) {\n      return MONTHS_SHORT_NP[date.month];\n    }\n    return MONTHS_NP[date.month];\n  };\n}\n\nfunction dateEn(size: number) {\n  return (date: { day: any; getDay: () => string | number }) => {\n    if (size === 1) {\n      return String(date.day);\n    }\n    if (size === 2) {\n      return pad(date.day);\n    }\n    if (size === 3) {\n      //@ts-ignore\n      return WEEKDAYS_SHORT_EN[date.getDay()];\n    }\n    //@ts-ignore\n    return WEEKDAYS_LONG_EN[date.getDay()];\n  };\n}\n\nfunction dateNp(size: number) {\n  return (date: { day: any; getDay: () => string | number }) => {\n    if (size === 1) {\n      return npDigit(String(date.day));\n    }\n    if (size === 2) {\n      return npDigit(pad(date.day));\n    }\n    if (size === 3) {\n      //@ts-ignore\n      return WEEKDAYS_SHORT_NP[date.getDay()];\n    }\n    //@ts-ignore\n    return WEEKDAYS_LONG_NP[date.getDay()];\n  };\n}\n\nfunction pass(seq: string) {\n  return () => seq;\n}\n\nconst charToString = {\n  Y: yearEn,\n  y: yearNp,\n  M: monthEn,\n  m: monthNp,\n  D: dateEn,\n  d: dateNp,\n};\n\nfunction isSpecial(ch: string) {\n  return ch in charToString;\n}\n\nfunction tokenize(formatStr: string | any[]) {\n  let inQuote = false;\n  let seq = \"\";\n  let special = \"\";\n  let specialSize = 0;\n\n  const tokens = [];\n\n  for (let i = 0; i < formatStr.length; i += 1) {\n    const ch = formatStr[i];\n    if (ch === special) {\n      specialSize += 1;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    // Time to process special\n    if (special !== \"\") {\n      //@ts-ignore\n      tokens.push(charToString[special](specialSize));\n      special = \"\";\n      specialSize = 0;\n    }\n\n    if (ch === '\"') {\n      inQuote = !inQuote;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!isSpecial(ch) || inQuote) {\n      seq += ch;\n    } else {\n      // got a special character\n      if (seq) {\n        tokens.push(pass(seq));\n        seq = \"\";\n      }\n\n      special = ch;\n      specialSize = 1;\n    }\n  }\n\n  if (seq) {\n    tokens.push(pass(seq));\n  } else if (special) {\n    //@ts-ignore\n    tokens.push(charToString[special](specialSize));\n  }\n\n  return tokens;\n}\n\n// Parse the format string for special characters\n// YY     2 digit year\n// YYY    3 digit year\n// YYYY   4 digit year\n// yy     2 digit year in Nepali\n// yyy    3 digit year in Nepali\n// yyyy   4 digit year in Nepali\n// M      month number\n// MM     0 padded 2 digit month\n// MMM    3 character month name\n// MMMM   Full month name\n// m      digit month in nepali unicode\n// mm     0 padded 2 digit month in nepali unicode\n// mmm    Partial Month name in nepali unicode\n// mmmm   Full month name in nepali unicode\n// D      date number\n// DD     0 padded date number (2 digit)\n// DDD    week day english short form\n// DDDD   week day english full form\n// d      date number in nepali\n// dd     0 padded date number in nepali (2 digit)\n// ddd    week day nepali short form\n// dddd   week day nepali full form\nexport default function format(nepaliDate: any, formatStr: any) {\n  return tokenize(formatStr)\n    .map((f) => f(nepaliDate))\n    .join(\"\");\n}\n","import { START_YEAR, NEPALI_DATE_MAP, EPOCH } from \"./config\";\nimport format from \"./format\";\n\nconst SUM_IDX = 14;\n\nfunction parse(dateString: string): [number, number, number] {\n  // Expected date formats are yyyy-mm-dd, yyyy.mm.dd yyyy/mm/dd\n  const parts = dateString.split(/[-./]/, 3);\n  const [year, month = 1, day = 1] = parts.map((d) => {\n    const n = parseInt(d, 10);\n    if (Number.isNaN(n)) {\n      throw new Error(\"Invalid date\");\n    }\n    return n;\n  });\n\n  // Make sure we are within range\n  if (year < START_YEAR || year >= START_YEAR + NEPALI_DATE_MAP.length) {\n    throw new Error(\"Nepal year out of range\");\n  }\n\n  if (month < 1 || month > 12) {\n    throw new Error(\"Invalid nepali month must be between 1 - 12\");\n  }\n\n  const daysInMonth = NEPALI_DATE_MAP[year - START_YEAR][month];\n  if (day < 1 || day > daysInMonth) {\n    throw new Error(\n      `Invalid nepali date must be between 1 - ${daysInMonth} in ${year} ${month}`\n    );\n  }\n\n  return [year, month - 1, day];\n}\n\nexport interface NepaliDateInterface {\n  setEnglishDate(date: Date): void;\n  getEnglishDate(): Date;\n  parse(dateString: string): void;\n  getYear(): number;\n  getMonth(): number;\n  getDate(): number;\n  getDay(): number;\n  getHours(): number;\n  getMinutes(): number;\n  getSeconds(): number;\n  getMilliseconds(): number;\n  getTime(): number;\n  setYear(year: number): void;\n  setMonth(month: number): void;\n  setDate(day: number): void;\n  set(year: number, month: number, date: number): void;\n  format(formatStr: string): string;\n  toString(): string;\n}\n\nexport class NepaliDate implements NepaliDateInterface {\n  private timestamp!: Date;\n  private year!: number;\n  private month!: number;\n  private day!: number;\n  \n  setMonth(month: number): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  setDate(day: number): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  constructor();\n  constructor(date: Date);\n  constructor(date: NepaliDate);\n  constructor(timestamp: number);\n  constructor(dateString: string);\n  constructor(year: number, month: number, day: number);\n  constructor(\n    ...args:\n      | []\n      | [date: Date]\n      | [date: NepaliDate]\n      | [timestamp: number]\n      | [dateString: string]\n      | [year: number, month: number, day: number]\n  ) {\n    console.info(\"emptyasdfasdlj\");\n    if (args.length === 0) {\n      this.setEnglishDate(new Date());\n    } else if (args.length === 1) {\n      const e = args[0];\n      if (typeof e === \"object\") {\n        if (e instanceof Date) {\n          this.setEnglishDate(e);\n        } else if (e instanceof NepaliDate) {\n          this.timestamp = e.timestamp;\n          this.year = e.year;\n          this.month = e.month;\n          this.day = e.day;\n        } else if (typeof e === \"number\") {\n          this.setEnglishDate(new Date(e));\n        } else {\n          throw new Error(\"Invalid date argument\");\n        }\n      } else if (typeof e === \"string\") {\n        // Try to parse the date\n        this.set(...parse(e));\n      } else {\n        throw new Error(\"Invalid date argument\");\n      }\n    } else if (args.length === 3) {\n      this.set(args[0], args[1], args[2]);\n    } else {\n      throw new Error(\"Invalid argument syntax\");\n    }\n  }\n\n  setEnglishDate(date: Date) {\n    this.timestamp = date;\n    let daysCount = Math.floor((this.timestamp.getTime() - EPOCH) / 86400000);\n\n    // Look for a index based on number of days since epoch.\n    // it is just to save some iterations searching from idx 0.\n    // So dividing by a number slightly higher than number of days in a year (365.25)\n    let idx = Math.floor(daysCount / 366);\n    while (daysCount >= NEPALI_DATE_MAP[idx][SUM_IDX]) {\n      idx += 1;\n    }\n\n    daysCount -= NEPALI_DATE_MAP[idx - 1][SUM_IDX];\n    const tmp = NEPALI_DATE_MAP[idx];\n\n    // eslint-disable-next-line prefer-destructuring\n    this.year = tmp[0];\n\n    // Month starts at 0, check for remaining days left\n    this.month = 0;\n    while (daysCount >= tmp[this.month + 1]) {\n      this.month += 1;\n      daysCount -= tmp[this.month];\n    }\n\n    // The day of month is the remaining days + 1\n    this.day = daysCount + 1;\n  }\n\n  getEnglishDate() {\n    return this.timestamp;\n  }\n\n  parse(dateString: string) {\n    this.set(...parse(dateString));\n  }\n\n  getYear() {\n    return this.year;\n  }\n\n  getMonth() {\n    return this.month;\n  }\n\n  getDate() {\n    return this.day;\n  }\n\n  getDay() {\n    return this.timestamp.getDay();\n  }\n\n  getHours() {\n    return this.timestamp.getHours();\n  }\n\n  getMinutes() {\n    return this.timestamp.getMinutes();\n  }\n\n  getSeconds() {\n    return this.timestamp.getSeconds();\n  }\n\n  getMilliseconds() {\n    return this.timestamp.getMilliseconds();\n  }\n\n  getTime() {\n    return this.timestamp.getTime();\n  }\n\n  setYear(year: number) {\n    this.set(year, this.month, this.day);\n  }\n\n  set(year: number, month: number, date: number) {\n    const idx = year + Math.floor(month / 12) - START_YEAR;\n    const tmp = NEPALI_DATE_MAP[idx];\n    let d = tmp[SUM_IDX] - tmp[SUM_IDX - 1];\n\n    const m = month % 12;\n    const mm = m < 0 ? 12 + m : m;\n\n    for (let i = 0; i < mm; i += 1) {\n      d += tmp[i + 1];\n    }\n    d += date - 1;\n    this.setEnglishDate(new Date(EPOCH + d * 86400000));\n  }\n\n  format(formatStr: any) {\n    return format(this, formatStr);\n  }\n\n  toString() {\n    return `${this.year}/${this.month + 1}/${this.day}`;\n  }\n}\n\n//@ts-ignore\nNepaliDate.minimum = () => new Date(EPOCH);\n//@ts-ignore\nNepaliDate.maximum = () =>\n  new Date(\n    EPOCH + NEPALI_DATE_MAP[NEPALI_DATE_MAP.length - 1][SUM_IDX] * 86400000\n  );\n\nexport default NepaliDate"],"names":[],"mappings":";;AAAO,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;AAC9C,MAAM,UAAU,GAAG,IAAI,CAAC;AAC/B;AAEO,MAAM,eAAe,GAAG;IAC7B,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAC3D,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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"}